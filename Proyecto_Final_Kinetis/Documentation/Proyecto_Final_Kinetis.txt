=============================================================================
List of generated methods in project: Proyecto_Final_Kinetis

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "PulsadorHora" (component ExtInt)
   - PulsadorHora_GetVal -Returns the actual value of the input pin of the component.

Module "PulsadorTemperatura" (component ExtInt)
   - PulsadorTemperatura_GetVal -Returns the actual value of the input pin of the component.

Module "PulsadorAjuste" (component ExtInt)
   - PulsadorAjuste_GetVal -Returns the actual value of the input pin of the component.

Module "LedD1"     (component BitIO)
   - LedD1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LedD1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LedD1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LedD1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "LedD2"     (component BitIO)
   - LedD2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LedD2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LedD2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LedD2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "LedD3"     (component BitIO)
   - LedD3_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LedD3_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LedD3_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LedD3_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "LedD4"     (component BitIO)
   - LedD4_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LedD4_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LedD4_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LedD4_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU1_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "Zumbador"  (component PWM)
   - Zumbador_Disable -This method disables the component - it stops the signal generation and events calling. When the timer 
                is disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - Zumbador_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Zumbador_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - Zumbador_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "Display"   (component 74HC595)
   - Display_Enable -Enables the device
   - Display_Disable -Disables the device
   - Display_ShiftByte -Shift a byte to the shift register. The most significant bit will be on output pin 0. Use Latch() to 
                show the data on the output pins.
   - Display_Latch -Sends a latch pulse to move the bits from the internal memory to the output pins.
   - Display_ReadByte -Returns the current value of the shift register. The current value of the shift register is cached in 
                the driver.
   - Display_WriteByte -Shifts the given byte and latches it.
   - Display_Deinit -Deinitializes the driver
   - Display_Init -Initializes the driver

Module "WAIT1"     (component WAIT)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "MCUC1"     (component McuLibConfig)

Module "PuertoSerie" (component AsynchroSerial)
   - PuertoSerie_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - PuertoSerie_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) 
                SendChar method only stores data into an output buffer. In case of a zero output buffer size, only one 
                character can be stored. Enabling the component (Enable method) starts the transmission of the stored data. 
                This method is available only if the transmitter property is enabled.
   - PuertoSerie_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - PuertoSerie_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of 
                the output buffer is defined and the transmitter property is enabled.
   - PuertoSerie_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer 
                is defined and the receiver property is enabled.
   - PuertoSerie_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer 
                is defined and the receiver property is enabled.
   - PuertoSerie_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - PuertoSerie_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "Tiempo"    (component GenericTimeDate)
   - Tiempo_AddTick -Increments the tick counter of the software RTC. Needs to be called periodically by the application to 
                increase the time tick count.
   - Tiempo_AddTicks -Same as AddTick(), but multiple ticks can be added in one step.
   - Tiempo_CalculateDayOfWeek -Returns the day of the week, Sunday starting as zero. Monday is 1, ...
   - Tiempo_SetTime -This method sets a new actual time of the software RTC.
   - Tiempo_GetTime -This method returns current time from the software RTC.
   - Tiempo_SetDate -This method sets a new actual date of the software RTC.
   - Tiempo_GetDate -This method returns current date from the software RTC.
   - Tiempo_SetTimeDate -This method sets a new actual time and date of the RTC.
   - Tiempo_GetTimeDate -This method returns current time and date from the RTC.
   - Tiempo_SetSWTimeDate -This method sets a new actual time and date of the software RTC.
   - Tiempo_GetSWTimeDate -This method returns current time and date from the software RTC.
   - Tiempo_SetInternalRTCTimeDate -This method sets a new actual time and date of the internal hardware RTC.
   - Tiempo_GetInternalRTCTimeDate -This method returns current time and date from the hardware RTC.
   - Tiempo_SyncWithInternalRTC -Synchronizes the software RTC with date and time from the internal hardware RTC
   - Tiempo_SyncSWtimeToInternalRTCsec -This method synchronizes the software RTC with the internal HW RTC. Because the 
                internal RTC only counts seconds, we sync on a second change.
   - Tiempo_SetExternalRTCTimeDate -This method sets a new actual time and date of the external hardware RTC.
   - Tiempo_GetExternalRTCTimeDate -This method returns current time and date from the external hardware RTC.
   - Tiempo_SyncWithExternalRTC -Synchronizes the software RTC with date and time from the hardware RTC. Note that if that RTC 
                interface requires interrupts, this function should be called only when interrupts are enabled.
   - Tiempo_UnixSecondsToTimeDateCustom -Transforms a given time/date into the Unix time stamp, with the number of seconds from 
                a starting date
   - Tiempo_UnixSecondsToTimeDate -Transforms a given time/date into the Unix time stamp, with the number of seconds after 
                1-Jan-1970
   - Tiempo_TimeDateToUnixSecondsCustom -Returns for a given time/date the corresponding UNIX time stamp with a custom base 
                date.
   - Tiempo_TimeDateToUnixSeconds -Returns for a given time/date the corresponding UNIX time stamp, starting at 1-Jan-1970.
   - Tiempo_AddDateString -Adds a formatted date string to a buffer
   - Tiempo_AddTimeString -Adds a formatted time string to a buffer
   - Tiempo_DeInit -Deinitializes the driver.
   - Tiempo_Init -Initialization method

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with a 
                pad character for a given length.
   - UTIL1_chcat -Adds a single character to a zero byte terminated string buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_NumFloatToStr -Converts a float value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix). Only 24bits 
                are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a string buffer. The value is in 1/100 units.  For example 
                for the value -13456 it will append the string "-134.56"
   - UTIL1_strcatNumFloat -Converts a float value into a string.
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)
   - UTIL1_GetValue16LE -Returns a 16bit Little Endian value from memory
   - UTIL1_GetValue24LE -Returns a 24bit Little Endian value from memory
   - UTIL1_GetValue32LE -Returns a 32bit Little Endian value from memory
   - UTIL1_SetValue16LE -Stores a 16bit value in memory as Little Endian
   - UTIL1_SetValue24LE -Stores a 24bit value in memory as Little Endian
   - UTIL1_SetValue32LE -Stores a 32bit value in memory as Little Endian
   - UTIL1_map -Maps a value from one range to another
   - UTIL1_map64 -Maps a value from one range to another, using 64bit math
   - UTIL1_constrain -Makes sure that a given input value is inside a given range.
   - UTIL1_random -Provides a random value. You have to call intialize the random number generator with randomSetSeed() first!
   - UTIL1_randomSetSeed -Sets a seed for the random number generator
   - UTIL1_Deinit -Driver De-Initialization
   - UTIL1_Init -Driver Initialization

Module "Contador"  (component TimerInt)

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "Temperatura" (component ADC)
   - Temperatura_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: 
                If the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - Temperatura_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - Temperatura_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of 
                the gain and offset from a specific reading.

Module "WAIT2"     (component WAIT)
   - WAIT2_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT2_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT2_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT2_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT2_Waitms -Wait for a specified time in milliseconds.
   - WAIT2_Waitus -Wait for a specified time in microseconds.
   - WAIT2_Waitns -Wait for a specified time in nano seconds.
   - WAIT2_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT2_Init -Driver initialization routine.
   - WAIT2_DeInit -Driver de-initialization routine

Module "Cpu"       (component MK64FN1M0LQ12)

===================================================================================
